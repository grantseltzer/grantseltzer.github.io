<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GrantSeltzer</title>
    <link>https://grantseltzer.github.io/</link>
    <description>Recent content on GrantSeltzer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 09 Apr 2019 03:32:37 +0000</lastBuildDate>
    
	<atom:link href="https://grantseltzer.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Using dynamic libraries in static Go binaries</title>
      <link>https://grantseltzer.github.io/blog/using-dynamic-libraries-in-static-go-binaries/</link>
      <pubDate>Tue, 09 Apr 2019 03:32:37 +0000</pubDate>
      
      <guid>https://grantseltzer.github.io/blog/using-dynamic-libraries-in-static-go-binaries/</guid>
      <description>This post highlights a linker directive in Go. It allows us to import functions from a dynamic library even when CGO is disable. I use the example of a contribution I recently made to the net and runtime packages to demonstrate its use case. 
Go has many little known features that allow you to give instructions to the compiler, linker, and other parts of the toolchain using special comments. Dave Cheney wrote an excellent post on them here.</description>
    </item>
    
    <item>
      <title>The Beauty of io.Writer</title>
      <link>https://grantseltzer.github.io/blog/the-beauty-of-io-writer/</link>
      <pubDate>Thu, 04 Apr 2019 03:32:37 +0000</pubDate>
      
      <guid>https://grantseltzer.github.io/blog/the-beauty-of-io-writer/</guid>
      <description>In this post we explore best practices of defining interfaces in Go. We use io.Writer to break down patterns and antipatterns. 
A perfect example of a properly designed Go interface is io.Writer:
type Writer interface { Write(p []byte) (n int, err error) }  It is short, simple, and powerful. The Write method takes a very generic slice of bytes and writes it to something.
In Rob Pike&amp;rsquo;s Go Proverbs talk he talks about how in Go, interfaces are not declared to be satisfied, they&amp;rsquo;re satisfied implicitly.</description>
    </item>
    
    <item>
      <title>Understanding cgroups</title>
      <link>https://grantseltzer.github.io/blog/understanding-cgroups/</link>
      <pubDate>Tue, 20 Nov 2018 03:32:37 +0000</pubDate>
      
      <guid>https://grantseltzer.github.io/blog/understanding-cgroups/</guid>
      <description>This post will introduce you to cgroups. The goal is to give a comprehensive enough explanation of cgroups and subsystems to broadly understand what they accomplish and how. The major focus will be on the CPU cgroup. The second section and third section will explore using cgroups from the command line. 
Control groups (or cgroups) are a feature of the Linux kernel by which groups of processes can be monitored and have their resources limited.</description>
    </item>
    
    <item>
      <title>Dissecting Go Binaries</title>
      <link>https://grantseltzer.github.io/blog/dissecting-go-binaries/</link>
      <pubDate>Fri, 14 Sep 2018 03:32:37 +0000</pubDate>
      
      <guid>https://grantseltzer.github.io/blog/dissecting-go-binaries/</guid>
      <description>This post will introduce you to the basic concepts of disassembly and walk through writing a simple disassembler in Go. The goal is to make the whole concept of disassembly as accessible as possible and hopefully give you, the reader, a takeaway or two about how compiled Go binaries work. 
Assembly code cannot lie. By reading assembly we become as close as possible to knowing whatâ€™s being run on our computer chips.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://grantseltzer.github.io/about/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://grantseltzer.github.io/about/about/</guid>
      <description>My name is Grant Seltzer Richman. I am a Security Engineer at Oscar Health. Previously I worked as a software engineer for Capsule8. My interests include systems programming, security, video games, hiking, watching baseball, and reading. I mostly will be writing blog posts about systems, security, and sabermetrics and posting photos from good hiking trips.
Feel free to reach out if you want to say hi! Also here&amp;rsquo;s a picture of me:</description>
    </item>
    
    <item>
      <title>Acadia NP</title>
      <link>https://grantseltzer.github.io/photos/acadia/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://grantseltzer.github.io/photos/acadia/</guid>
      <description>5/02/18 - 5/06/18   0th
      A
      B
      C
      D
      E
      F
      G
      H
      I
      J</description>
    </item>
    
    <item>
      <title>Photos</title>
      <link>https://grantseltzer.github.io/photos/photos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://grantseltzer.github.io/photos/photos/</guid>
      <description>Zion - Bryce Canyon - Valley of Fire - Jan 2019
Acadia - May 2018</description>
    </item>
    
    <item>
      <title>Zion NP, Bryce Canyon NP, and Valley of Fire SP</title>
      <link>https://grantseltzer.github.io/photos/utah/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://grantseltzer.github.io/photos/utah/</guid>
      <description>1/15/19 - 1/22/19   I m g 20190116 122257
      I m g 20190116 133336
      I m g 20190116 135148
      I m g 20190116 145647
      I m g 20190117 123558
      I m g 20190117 124434
      I m g 20190117 124538</description>
    </item>
    
  </channel>
</rss>