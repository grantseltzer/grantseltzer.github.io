<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GrantSeltzer</title>
    <link>https://grantseltzer.github.io/</link>
    <description>Recent content on GrantSeltzer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 08 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://grantseltzer.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with bpf and libbpfgo</title>
      <link>https://grantseltzer.github.io/blog/libbpf-beginners-part-one/</link>
      <pubDate>Mon, 08 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://grantseltzer.github.io/blog/libbpf-beginners-part-one/</guid>
      <description>In my previous posts on the subject of bpf I used a project called BCC to compile, load, and interact with my bpf programs. I, and many other developers, have recently heard about a better way to build ebpf projects called libbpf. There are a few good resources to use when developing libbpf based programs but getting started can still be a quite overwhelming. The goal of this post is to provide a simple and effective explanation of what libbpf is and how to start using it.</description>
    </item>
    
    <item>
      <title>What is vmlinux.h?</title>
      <link>https://grantseltzer.github.io/blog/vmlinux-header/</link>
      <pubDate>Mon, 01 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://grantseltzer.github.io/blog/vmlinux-header/</guid>
      <description>If you&amp;rsquo;ve been reading much bpf code recently, you&amp;rsquo;ve probably seen this:
#include &amp;quot;vmlinux.h&amp;quot; vmlinux.h is generated code, it contains all of the type definitions that your running linux kernel uses in it&amp;rsquo;s own source code. This is an important and possibly strange concept to wrap your head around so let me explain.
When you build linux one of the output artifacts is a file called vmlinux. It&amp;rsquo;s also typically packaged with major distributions.</description>
    </item>
    
    <item>
      <title>Parsing Go Binary DWARF Info</title>
      <link>https://grantseltzer.github.io/blog/dwarf/</link>
      <pubDate>Sat, 02 Jan 2021 03:32:37 +0000</pubDate>
      
      <guid>https://grantseltzer.github.io/blog/dwarf/</guid>
      <description>In my very first blog post, Dissecting Go Binaries, I began to explore ELF files. That is the default format of executable binaries that Go produces on unix-like operating systems like Linux and MacOS. My most recent project, weaver, has me exploring a related object file format that Go leverages, DWARF.
The DWARF specification is, of course, not Go specific. The DWARF object file specification describes the functions, variables, and types of a compiled program.</description>
    </item>
    
    <item>
      <title>Tracing Go Programs with eBPF!</title>
      <link>https://grantseltzer.github.io/talks/gophercon2020/</link>
      <pubDate>Fri, 13 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://grantseltzer.github.io/talks/gophercon2020/</guid>
      <description>Code can be found here
  </description>
    </item>
    
    <item>
      <title>Go Time #159</title>
      <link>https://grantseltzer.github.io/talks/gotime/</link>
      <pubDate>Tue, 10 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://grantseltzer.github.io/talks/gotime/</guid>
      <description>   </description>
    </item>
    
    <item>
      <title>Tracing Go Functions with eBPF Part 2</title>
      <link>https://grantseltzer.github.io/blog/tracing-go-functions-with-ebpf-part-2/</link>
      <pubDate>Sun, 10 May 2020 03:32:37 +0000</pubDate>
      
      <guid>https://grantseltzer.github.io/blog/tracing-go-functions-with-ebpf-part-2/</guid>
      <description>In part 1 of this series we learned about how to attach uprobes and eBPF programs to specific functions in Go programs. We went through an example where we attached our probe to the handler of a webserver. Everytime the probe was triggered we simply printed out a log saying that the handler was called. This could be adapted to record metrics, perhaps using counters instead of log lines.
In this post we&amp;rsquo;re going to delve a bit deeper.</description>
    </item>
    
    <item>
      <title>Fermentation Experimentation</title>
      <link>https://grantseltzer.github.io/blog/fermentation/</link>
      <pubDate>Thu, 05 Mar 2020 03:32:37 +0000</pubDate>
      
      <guid>https://grantseltzer.github.io/blog/fermentation/</guid>
      <description>In the past year I&amp;rsquo;ve decided that I haven&amp;rsquo;t perpetuated enough Brooklyn stereotypes and have taken up fermentation as a hobby. This post goes through a few of the experiments that I&amp;rsquo;ve run with varying success.
My set up is pretty basic. I have a small cabinet/closet in the corner of my kitchen that i&amp;rsquo;ve designated as the &amp;lsquo;fermentation station&amp;rsquo;. I have a thermometer but it mostly stays at room temperature.</description>
    </item>
    
    <item>
      <title>Tracing Go Functions with eBPF Part 1</title>
      <link>https://grantseltzer.github.io/blog/tracing-go-functions-with-ebpf-part-1/</link>
      <pubDate>Fri, 14 Feb 2020 03:32:37 +0000</pubDate>
      
      <guid>https://grantseltzer.github.io/blog/tracing-go-functions-with-ebpf-part-1/</guid>
      <description>eBPF is a virtual machine, similar in concept to the JVM, except it&amp;rsquo;s inside the Linux kernel. It lets you write C-like code, compile it, and load the byte code into the kernel. You can then attach hooks to your loaded eBPF program to trigger it to run. Those hooks could be things like system calls, kprobes, or uprobes.
There&amp;rsquo;s many use cases for eBPF. Considering eBPF programs have full system visibility there are very few limits on what you can do.</description>
    </item>
    
    <item>
      <title>Using Karn for Seccomp Enforcement</title>
      <link>https://grantseltzer.github.io/blog/karn/</link>
      <pubDate>Wed, 11 Dec 2019 03:32:37 +0000</pubDate>
      
      <guid>https://grantseltzer.github.io/blog/karn/</guid>
      <description>Karn aims to provide for Linux what entitlements provide for iOS, or what pledge provides for OpenBSD. It does this by translating a high level set of intuitive &amp;lsquo;entitlements&amp;rsquo; into complex seccomp profiles.
For example, A developer using Karn can simply specify that their application needs to make network connections, or exec other processes and karn will handle granting it permission to do those things (and nothing else!).
So, how does it work?</description>
    </item>
    
    <item>
      <title>The Problem with Sandboxing Solutions</title>
      <link>https://grantseltzer.github.io/talks/hushcon2019/</link>
      <pubDate>Fri, 06 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://grantseltzer.github.io/talks/hushcon2019/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The Problem with Sandboxing Solutions</title>
      <link>https://grantseltzer.github.io/talks/kubesec2019/</link>
      <pubDate>Mon, 18 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://grantseltzer.github.io/talks/kubesec2019/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Linux Procfs</title>
      <link>https://grantseltzer.github.io/blog/procfs/</link>
      <pubDate>Wed, 02 Oct 2019 03:32:37 +0000</pubDate>
      
      <guid>https://grantseltzer.github.io/blog/procfs/</guid>
      <description>I love the procfs because it provides an intuitive and easy to use interface for interacting with the kernel. In the same way you&amp;rsquo;d normally use the command line for exploring files, you can control and find out information about currently running processes. All without the need for system calls.
A procfs is mounted at /proc by default. If you go into /proc you&amp;rsquo;ll see something like this:
You&amp;rsquo;ll notice a lot of the directories that are just named by numbers.</description>
    </item>
    
    <item>
      <title>Linux Overlayfs</title>
      <link>https://grantseltzer.github.io/blog/overlayfs/</link>
      <pubDate>Wed, 18 Sep 2019 03:32:37 +0000</pubDate>
      
      <guid>https://grantseltzer.github.io/blog/overlayfs/</guid>
      <description>Remember back to when your teacher in grade school would write on sheets of clear plastic, stack them, and display them with an overhead projector? That is exactly how overlayfs works&amp;hellip; except with filesystems.
Overlay filesystems allow you to take multiple directory trees and view them as if they were merged together. The added benefit is that changes in the merged view do not affect the underlying directories. There are many use cases for this, mostly related to containers, but more on that at the end.</description>
    </item>
    
    <item>
      <title>Debugging Go tests</title>
      <link>https://grantseltzer.github.io/blog/test-build-modes/</link>
      <pubDate>Thu, 15 Aug 2019 03:32:37 +0000</pubDate>
      
      <guid>https://grantseltzer.github.io/blog/test-build-modes/</guid>
      <description>I recently was working on debugging a unit test I wrote in Go. I couldn&amp;rsquo;t figure out why one of my test cases was causing a runtime error that never happened when running my actual program. I was using a runtime directive so I suspected there may be some difference between doing a go test and a go run. I was looking through Go build mode documentation while wondering if I could step through it with a debugger.</description>
    </item>
    
    <item>
      <title>Standardized Streams and Shells</title>
      <link>https://grantseltzer.github.io/blog/standardized-streams-and-shells/</link>
      <pubDate>Tue, 21 May 2019 03:32:37 +0000</pubDate>
      
      <guid>https://grantseltzer.github.io/blog/standardized-streams-and-shells/</guid>
      <description>Every well known operating system has a concept of standardized streams. These consist of standard input, output, and error. As their name purports, they are the standard places for proccesses to read input, and send output. They&amp;rsquo;re a crucial concept that allows various running processes to easily communicate.
Standardized streams enable you to string together multiple commands with a pipe (|) in your shell like this:
$~ cat /dev/urandom | less</description>
    </item>
    
    <item>
      <title>Using dynamic libraries in static Go binaries</title>
      <link>https://grantseltzer.github.io/blog/using-dynamic-libraries-in-static-go-binaries/</link>
      <pubDate>Tue, 09 Apr 2019 03:32:37 +0000</pubDate>
      
      <guid>https://grantseltzer.github.io/blog/using-dynamic-libraries-in-static-go-binaries/</guid>
      <description>Go has many little known features that allow you to give instructions to the compiler, linker, and other parts of the toolchain using special comments. Dave Cheney wrote an excellent post on them here. One such &amp;lsquo;pragma&amp;rsquo; as Cheney calls them is //go:cgo_import_dynamic. This is a linker directive. It tells the linker to pull in a specific function from a dynamic library such as libc.
Let&amp;rsquo;s check out an example from my recent contribution to the runtime package.</description>
    </item>
    
    <item>
      <title>The Beauty of io.Writer</title>
      <link>https://grantseltzer.github.io/blog/the-beauty-of-io-writer/</link>
      <pubDate>Thu, 04 Apr 2019 03:32:37 +0000</pubDate>
      
      <guid>https://grantseltzer.github.io/blog/the-beauty-of-io-writer/</guid>
      <description>A perfect example of a properly designed Go interface is io.Writer:
type Writer interface { Write(p []byte) (n int, err error) } It is short, simple, and powerful. The Write method takes a very generic slice of bytes and writes it to something.
In Rob Pike&amp;rsquo;s Go Proverbs talk he talks about how in Go, interfaces are not declared to be satisfied, they&amp;rsquo;re satisfied implicitly. An interface should be a way of classifying types, not a blueprint for declaring them.</description>
    </item>
    
    <item>
      <title>Understanding cgroups</title>
      <link>https://grantseltzer.github.io/blog/understanding-cgroups/</link>
      <pubDate>Tue, 20 Nov 2018 03:32:37 +0000</pubDate>
      
      <guid>https://grantseltzer.github.io/blog/understanding-cgroups/</guid>
      <description>Control groups (or cgroups) are a feature of the Linux kernel by which groups of processes can be monitored and have their resources limited. For example, if you don&amp;rsquo;t want a google chrome process (or it&amp;rsquo;s many child processes) to exceed a gigabyte of RAM or 30% total CPU usage, cgroups would let you do that. They are an extremely powerful tool by which you can guarentee limits on performance, but understanding how they work and how to use them can be a little daunting.</description>
    </item>
    
    <item>
      <title>Dissecting Go Binaries</title>
      <link>https://grantseltzer.github.io/blog/dissecting-go-binaries/</link>
      <pubDate>Fri, 14 Sep 2018 03:32:37 +0000</pubDate>
      
      <guid>https://grantseltzer.github.io/blog/dissecting-go-binaries/</guid>
      <description>Assembly code cannot lie. By reading assembly we become as close as possible to knowing what’s being run on our computer chips. This is exactly why disassembly is important! If you have a binary with malicious intentions, disassembling it will expose them. If you can&amp;rsquo;t figure out a performance bottleneck in your code, you can disassemble it for clarity.
If you&amp;rsquo;re not up to snuff on reading x86_64 assembly, don&amp;rsquo;t worry, most of us aren&amp;rsquo;t.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://grantseltzer.github.io/recipes/miami-rolls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://grantseltzer.github.io/recipes/miami-rolls/</guid>
      <description>&amp;lt;- recipes
Miami rolls are a challah based onion pocket roll. They&amp;rsquo;re very soft, sweet, flavorful, and delicious. Pretty traditional to jewish bakeries in New York. I worked at a bakery all throughout high school and these were my favorite things there. When they closed down in 2020 I tried to get the recipe but the owner wouldn&amp;rsquo;t share it with me. Through 10+ iterations I have engineered a recipe that is exactly how I remember them.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://grantseltzer.github.io/recipes/recipes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://grantseltzer.github.io/recipes/recipes/</guid>
      <description>Recipes:
 Miami Rolls  </description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>https://grantseltzer.github.io/about/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://grantseltzer.github.io/about/about/</guid>
      <description>My name is Grant Seltzer Richman. I am an Open Source Engineer at Aqua. Previously I worked as a software engineer for Oscar Health, Capsule8, and Red Hat. My interests include systems programming, security, video games, hiking, watching baseball, and reading. I mostly will be writing blog posts about linux, security, and various hobbies.
Feel free to reach out if you want to say hi!</description>
    </item>
    
  </channel>
</rss>
