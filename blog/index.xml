<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on GrantSeltzer</title>
    <link>https://grantseltzer.github.io/blog/</link>
    <description>Recent content in Blogs on GrantSeltzer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 21 May 2019 03:32:37 +0000</lastBuildDate>
    
	<atom:link href="https://grantseltzer.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Standardized Streams and Shells</title>
      <link>https://grantseltzer.github.io/blog/standardized-streams-and-shells/</link>
      <pubDate>Tue, 21 May 2019 03:32:37 +0000</pubDate>
      
      <guid>https://grantseltzer.github.io/blog/standardized-streams-and-shells/</guid>
      <description>In this post we discuss how standardized streams (stdin/stdout/stderr) work on Linux, especially related to shells. 
Every well known operating system has a concept of standardized streams. These consist of standard input, output, and error. As their name purports, they are the standard places to read input, and send output. They&amp;rsquo;re a crucial concept that allows various running procceses to easily communicate.
Standardized streams enable you to string together multiple commands with a pipe (|) in your shell like this:</description>
    </item>
    
    <item>
      <title>Using dynamic libraries in static Go binaries</title>
      <link>https://grantseltzer.github.io/blog/using-dynamic-libraries-in-static-go-binaries/</link>
      <pubDate>Tue, 09 Apr 2019 03:32:37 +0000</pubDate>
      
      <guid>https://grantseltzer.github.io/blog/using-dynamic-libraries-in-static-go-binaries/</guid>
      <description>This post highlights a linker directive in Go. It allows us to import functions from a dynamic library even when CGO is disabled. I use the example of a contribution I recently made to the net and runtime packages to demonstrate its use case. 
Go has many little known features that allow you to give instructions to the compiler, linker, and other parts of the toolchain using special comments. Dave Cheney wrote an excellent post on them here.</description>
    </item>
    
    <item>
      <title>The Beauty of io.Writer</title>
      <link>https://grantseltzer.github.io/blog/the-beauty-of-io-writer/</link>
      <pubDate>Thu, 04 Apr 2019 03:32:37 +0000</pubDate>
      
      <guid>https://grantseltzer.github.io/blog/the-beauty-of-io-writer/</guid>
      <description>In this post we explore best practices of defining interfaces in Go. We use io.Writer to break down patterns and antipatterns. 
A perfect example of a properly designed Go interface is io.Writer:
type Writer interface { Write(p []byte) (n int, err error) }  It is short, simple, and powerful. The Write method takes a very generic slice of bytes and writes it to something.
In Rob Pike&amp;rsquo;s Go Proverbs talk he talks about how in Go, interfaces are not declared to be satisfied, they&amp;rsquo;re satisfied implicitly.</description>
    </item>
    
    <item>
      <title>Understanding cgroups</title>
      <link>https://grantseltzer.github.io/blog/understanding-cgroups/</link>
      <pubDate>Tue, 20 Nov 2018 03:32:37 +0000</pubDate>
      
      <guid>https://grantseltzer.github.io/blog/understanding-cgroups/</guid>
      <description>This post will introduce you to cgroups. The goal is to give a comprehensive enough explanation of cgroups and subsystems to broadly understand what they accomplish and how. The major focus will be on the CPU cgroup. The second section and third section will explore using cgroups from the command line. 
Control groups (or cgroups) are a feature of the Linux kernel by which groups of processes can be monitored and have their resources limited.</description>
    </item>
    
    <item>
      <title>Dissecting Go Binaries</title>
      <link>https://grantseltzer.github.io/blog/dissecting-go-binaries/</link>
      <pubDate>Fri, 14 Sep 2018 03:32:37 +0000</pubDate>
      
      <guid>https://grantseltzer.github.io/blog/dissecting-go-binaries/</guid>
      <description>This post will introduce you to the basic concepts of disassembly and walk through writing a simple disassembler in Go. The goal is to make the whole concept of disassembly as accessible as possible and hopefully give you, the reader, a takeaway or two about how compiled Go binaries work. 
Assembly code cannot lie. By reading assembly we become as close as possible to knowing whatâ€™s being run on our computer chips.</description>
    </item>
    
  </channel>
</rss>